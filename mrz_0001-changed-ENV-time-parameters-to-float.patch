From b1cc6239ffaad9a58601651e7845bc6a63b743d3 Mon Sep 17 00:00:00 2001
From: Friedolino <mkirchn@freenet.de>
Date: Sat, 13 Apr 2019 19:32:34 +0200
Subject: [PATCH] changed ENV time parameters to float

---
 example/LfoVis.qml          |  8 +++++---
 example/MainMenu.qml        |  9 +++++----
 example/ZynAmpEnv.qml       | 19 ++++++++++++++++---
 example/ZynAmpGeneral.qml   |  5 ++++-
 example/ZynBandwidthEnv.qml | 13 +++++++++++--
 example/ZynDistortion.qml   | 25 ++++++++++++++++++++++++-
 example/ZynFilterEnv.qml    | 19 ++++++++++++++++---
 example/ZynFreqEnv.qml      | 13 +++++++++++--
 example/ZynModAmpEnv.qml    | 20 +++++++++++++++++---
 qml/Knob.qml                |  2 +-
 10 files changed, 110 insertions(+), 23 deletions(-)

diff --git a/example/LfoVis.qml b/example/LfoVis.qml
index 943e41d..2334e55 100644
--- a/example/LfoVis.qml
+++ b/example/LfoVis.qml
@@ -24,10 +24,10 @@ Widget {
 
         type_var.callback = lambda {|x|
             ntype = [:sine, :triangle, :square, :rampup,
-                :rampdown, :exp1, :exp2, :random][x]
+                :rampdown, :exp1, :exp2, :random, :noise][x]
             return if(ntype == lfo_vis.type)
             lfo_vis.type = [:sine, :triangle, :square, :rampup,
-                :rampdown, :exp1, :exp2, :random][x]}
+                :rampdown, :exp1, :exp2, :random, :noise][x]}
 
         depth_var = OSC::RemoteParam.new($remote, base+"Pintensity")
         depth_var.callback = lambda {|x|
@@ -146,7 +146,9 @@ Widget {
             Proc.new {|phase| (0.05 ** phase) * 2.0 - 1.0}
         when :exp2
             Proc.new {|phase| (0.001 ** phase) * 2.0 - 1.0}
-	when :random
+		when :random
+	    Proc.new {|phase| 0 } #TODO: proper RAN LFO display
+	    when :noise
 	    Proc.new {|phase| 0 } #TODO: proper RAN LFO display
         else
             Proc.new {|x| Math.sin(2*3.14*x) }
diff --git a/example/MainMenu.qml b/example/MainMenu.qml
index e7bed05..dc2f89d 100644
--- a/example/MainMenu.qml
+++ b/example/MainMenu.qml
@@ -101,6 +101,7 @@ Widget {
         return if val == :cancel
         opt = file.options[file.selected]
         prt  = root.get_view_pos(:part)
+        
         if(opt == "load instrument")
             $remote.action("/load_xiz", prt, val)
         elsif(opt == "save instrument")
@@ -109,14 +110,14 @@ Widget {
             $remote.action("/load_xmz", val)
         elsif(opt == "save master")
             $remote.action("/save_xmz", val)
-        elsif(opt == "save microtonal")
-            $remote.action("/save_xsz", val)
         elsif(opt == "load microtonal")
             $remote.action("/load_xsz", val)
+        elsif(opt == "save microtonal")
+            $remote.action("/save_xsz", val)
         elsif(opt == "load midi bindins")
-            $remote.action("/save_xlz", val)
-        elsif(opt == "save midi bindings")
             $remote.action("/load_xlz", val)
+        elsif(opt == "save midi bindings")
+            $remote.action("/save_xlz", val)
         elsif(opt == "setup record")
             $remote.action("/HDDRecorder/preparefile", val)
         end
diff --git a/example/ZynAmpEnv.qml b/example/ZynAmpEnv.qml
index 42eb442..94c5c8b 100644
--- a/example/ZynAmpEnv.qml
+++ b/example/ZynAmpEnv.qml
@@ -10,13 +10,26 @@ Group {
 
     ParModuleRow {
         id: top
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PA_dt" }
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PD_dt"}
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"A_dt"
+            type:   :float
+        
+        }
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"D_dt"
+            type:   :float
+        }
         Knob { whenValue: lambda { box.cb }; extern: box.extern+"PS_val"}
     }
     ParModuleRow {
         id: bot
-        Knob     { whenValue: lambda { box.cb }; extern: box.extern+"PR_dt"}
+        Knob     { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"R_dt"
+            type:   :float
+        }
         Knob     { whenValue: lambda { box.cb }; extern: box.extern+"Penvstretch"}
         Col {
             ToggleButton   { label: "FRCR"; whenValue: lambda { box.cb }; extern: box.extern+"Pforcedrelease"}
diff --git a/example/ZynAmpGeneral.qml b/example/ZynAmpGeneral.qml
index c9c4f6a..ddf15ea 100644
--- a/example/ZynAmpGeneral.qml
+++ b/example/ZynAmpGeneral.qml
@@ -6,7 +6,10 @@ Group {
 
     ParModuleRow {
         id: top
-        Knob { extern: box.extern+"PVolume" }
+        Knob { 
+            extern: box.extern+"Volume"
+            type:   :float
+        }
         Knob { extern: box.extern+"PAmpVelocityScaleFunction"}
         Knob { extern: box.extern+"PPanning"}
         Knob { extern: box.extern+"PPunchStretch"}
diff --git a/example/ZynBandwidthEnv.qml b/example/ZynBandwidthEnv.qml
index 8b87b1b..99864f6 100644
--- a/example/ZynBandwidthEnv.qml
+++ b/example/ZynBandwidthEnv.qml
@@ -11,8 +11,17 @@ Group {
     ParModuleRow {
         id: top
         Knob { whenValue: lambda { box.cb }; extern: box.extern+"PA_val" }
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PA_dt" }
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PR_dt"}
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"A_dt"
+            type:   :float
+        
+        }
+        Knob     { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"R_dt"
+            type:   :float
+        }
         Knob { whenValue: lambda { box.cb }; extern: box.extern+"PR_val"}
     }
     ParModuleRow {
diff --git a/example/ZynDistortion.qml b/example/ZynDistortion.qml
index 00721ea..6fb43b2 100644
--- a/example/ZynDistortion.qml
+++ b/example/ZynDistortion.qml
@@ -55,7 +55,30 @@ Widget {
                 }
                 Knob {
                     extern: dst.extern + "Distorsion/Pdrive"; label: "drive"
-                    whenValue: lambda {wave.refresh}
+                    whenValue: lambda {wave.refresh};
+                    function setValue(v) {
+                        valuator.value = lim(v, 0.0, 1.0);
+                        valuator.whenValue.call;
+                        valuator.damage_self
+                    }
+                }
+                Knob {
+                    extern: dst.extern + "Distorsion/Poffset"; label: "DC"
+                    whenValue: lambda {wave.refresh};
+                    function setValue(v) {
+                        valuator.value = lim(v, 0.0, 1.0);
+                        valuator.whenValue.call;
+                        valuator.damage_self
+                    }
+                }
+                Knob {
+                    extern: dst.extern + "Distorsion/Pfuncpar"; label: "shape"
+                    whenValue: lambda {wave.refresh};
+                    function setValue(v) {
+                        valuator.value = lim(v, 0.0, 1.0);
+                        valuator.whenValue.call;
+                        valuator.damage_self
+                    }
                 }
                 Knob {   extern: dst.extern + "Distorsion/Plevel"; label: "level" }
                 Col {
diff --git a/example/ZynFilterEnv.qml b/example/ZynFilterEnv.qml
index 279b8fe..b2d186d 100644
--- a/example/ZynFilterEnv.qml
+++ b/example/ZynFilterEnv.qml
@@ -11,9 +11,22 @@ Group {
 
     ParModuleRow {
         id: top
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PA_dt" }
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PD_dt"}
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PR_dt"}
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"A_dt"
+            type:   :float
+        
+        }
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"D_dt"
+            type:   :float
+        }
+        Knob     { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"R_dt"
+            type:   :float
+        }
         ToggleButton { label: "FRCR"; whenValue: lambda { box.cb }; extern: box.extern+"Pforcedrelease"}
     }
     ParModuleRow {
diff --git a/example/ZynFreqEnv.qml b/example/ZynFreqEnv.qml
index 511f4d9..b3dfd27 100644
--- a/example/ZynFreqEnv.qml
+++ b/example/ZynFreqEnv.qml
@@ -11,8 +11,17 @@ Group {
 
     ParModuleRow {
         id: top
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PA_dt" }
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PR_dt" }
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"A_dt"
+            type:   :float
+        
+        }
+        Knob     { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"R_dt"
+            type:   :float
+        }
         ToggleButton { label: "FRCR"; whenValue: lambda { box.cb }; extern: box.extern+"Pforcedrelease"}
     }
     ParModuleRow {
diff --git a/example/ZynModAmpEnv.qml b/example/ZynModAmpEnv.qml
index 54d4374..8a636d1 100644
--- a/example/ZynModAmpEnv.qml
+++ b/example/ZynModAmpEnv.qml
@@ -10,10 +10,24 @@ Group {
     }
 
     ParModuleRow {
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PA_dt" }
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PD_dt"}
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"A_dt"
+            type:   :float
+        
+        }
+        Knob { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"D_dt"
+            type:   :float
+        }
+        
         Knob { whenValue: lambda { box.cb }; extern: box.extern+"PS_val"}
-        Knob { whenValue: lambda { box.cb }; extern: box.extern+"PR_dt"}
+        Knob     { 
+            whenValue: lambda { box.cb }; 
+            extern: box.extern+"R_dt"
+            type:   :float
+        }
         Knob { whenValue: lambda { box.cb }; extern: box.extern+"Penvstretch"}
     }
 }
diff --git a/qml/Knob.qml b/qml/Knob.qml
index 62951d0..f8c7a2c 100644
--- a/qml/Knob.qml
+++ b/qml/Knob.qml
@@ -15,7 +15,7 @@ Valuator {
             v.arc(cx, cy, outer, start, end_, 1);
             v.arc(cx, cy, inner, end_, start, 2);
             v.close_path
-            v.fill_color color("114575")
+            v.fill_color color("ffffff")
             v.fill
         end
 
-- 
2.7.4

